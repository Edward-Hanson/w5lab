AWSTemplateFormatVersion: "2010-09-09"
Description: Monolithic Stack for Spring Boot ECS App with PostgreSQL and S3

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.4.0/24
  DBInstanceIdentifier:
    Type: String
    Default: cloudbasedproject-db
  DBSecretName:
    Type: String
    Default: cloudbasedproject-db-credentials
  S3BucketName:
    Type: String
    Default: cloudbasedproject-bucket

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [ { Key: Name, Value: cloudbasedproject-vpc } ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: IGWAttachment
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB allows HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  EcsServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS tasks allow traffic from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2020
        ToPort: 2020
        SourceSecurityGroupId: !Ref AlbSG

  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PostgreSQL access from ECS only
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref EcsServiceSG

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
      - PolicyName: AdditionalAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            Resource: arn:aws:s3:::cloudbasedproject-bucket/*
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBSecretName}-*

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2

  PostgresDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 17.5
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DBSecretName, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DBSecretName, ':SecretString:password}}' ] ]
      VPCSecurityGroups:
      - !Ref RDSSG
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true
      PubliclyAccessible: false
      StorageType: gp2
      DBName: cloudbasedproject

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: cloudbasedproject-alb
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref AlbSG
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'

  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 2020
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      Matcher: { HttpCode: 200 }

  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 2020
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      Matcher: { HttpCode: 200 }

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref BlueTargetGroup

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/cloudbasedproject
      RetentionInDays: 7

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: cloudbasedproject-cluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: cloudbasedproject-task
      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
      - Name: springboot-container
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cloudbasedproject-repo:latest"
        PortMappings:
        - ContainerPort: 2020
        Environment:
        - Name: SPRING_DATASOURCE_URL
          Value: !Sub jdbc:postgresql://${PostgresDB.Endpoint.Address}:${PostgresDB.Endpoint.Port}/cloudbasedproject
        - Name: SPRING_DATASOURCE_USERNAME
          Value: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DBSecretName, ':SecretString:username}}' ] ]
        - Name: SPRING_DATASOURCE_PASSWORD
          Value: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DBSecretName, ':SecretString:password}}' ] ]
        - Name: AWS_REGION
          Value: !Ref AWS::Region
        - Name: S3_BUCKET_NAME
          Value: !Ref S3BucketName
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALB
      - ALBListener
      - BlueTargetGroup
    Properties:
      ServiceName: cloudbasedproject-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 60
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          SecurityGroups:
          - !Ref EcsServiceSG
          AssignPublicIp: DISABLED
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
      - ContainerName: springboot-container
        ContainerPort: 2020
        TargetGroupArn: !Ref BlueTargetGroup

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS
      ApplicationName: cloudbasedproject-codedeploy

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - ALBListener
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: cloudbasedproject-deployment-group
      ServiceRoleArn: arn:aws:iam::343218213563:role/codedeploy-role-w5
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      AutoRollbackConfiguration:
        Enabled: true
        Events: [ DEPLOYMENT_FAILURE ]
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
        GreenFleetProvisioningOption:
          Action: DISCOVER_EXISTING
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !Ref BlueTargetGroup
              - Name: !Ref GreenTargetGroup
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListener
      EcsServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !Ref ECSService


Outputs:
  ALBURL:
    Description: Application Load Balancer URL
    Value: !Sub http://${ALB.DNSName}

  RDSAddress:
    Description: RDS PostgreSQL Endpoint
    Value: !GetAtt PostgresDB.Endpoint.Address

  RDSPort:
    Description: RDS PostgreSQL Port
    Value: !GetAtt PostgresDB.Endpoint.Port

  ClusterName:
    Description: ECS Cluster
    Value: !Ref ECSCluster
